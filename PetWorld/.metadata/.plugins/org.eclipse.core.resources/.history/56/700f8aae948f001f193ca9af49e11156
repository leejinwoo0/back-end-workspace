package com.kh.pet.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;


import java.util.List;

@Controller
@RequestMapping("/members")
public class MemberController {

    @Autowired
    private MemberService memberService;

    @Autowired
    private PasswordEncoder passwordEncoder; // PasswordEncoder 주입

    // 회원 목록 조회
    @RequestMapping("/list")
    public String getMemberList(HttpServletRequest request) {
        List<Member> members = memberService.getMemberList();
        request.setAttribute("members", members);
        return "memberList"; // 회원 목록 페이지로 이동
    }

    // 중복 체크
    @ResponseBody
    @PostMapping("/check")
    public boolean check(String id) {
        return memberService.check(id);
    }

    // 회원가입
    @PostMapping("/signUp")
    public String signUp(Member member, HttpServletRequest request) {
        try {
            // 비밀번호 암호화
            member.setPassword(passwordEncoder.encode(member.getPassword()));

            boolean isRegistered = memberService.signUp(member);
            if (isRegistered) {
                return "redirect:/login"; // 회원가입 성공 후 로그인 페이지로 리다이렉트
            } else {
                request.setAttribute("errorMessage", "회원가입에 실패했습니다. 다시 시도해주세요.");
                return "signUp"; // 실패 시 다시 회원가입 페이지로 이동
            }
        } catch (Exception e) {
            request.setAttribute("errorMessage", "회원가입 중 오류가 발생했습니다: " + e.getMessage());
            return "signUp"; // 예외 발생 시 다시 회원가입 페이지로 이동
        }
    }

    // 회원정보 수정
    @PostMapping("/update")
    public String updateMember(Member member, HttpServletRequest request) {
        try {
            boolean isUpdated = memberService.updateMember(member);
            if (isUpdated) {
                return "redirect:/members/list"; // 수정 성공 후 회원 목록 페이지로 리다이렉트
            } else {
                request.setAttribute("errorMessage", "회원정보 수정에 실패했습니다. 다시 시도해주세요.");
                return "updateMember"; // 실패 시 수정 페이지로 이동
            }
        } catch (Exception e) {
            request.setAttribute("errorMessage", "회원정보 수정 중 오류가 발생했습니다: " + e.getMessage());
            return "updateMember"; // 예외 발생 시 수정 페이지로 이동
        }
    }

    // 회원탈퇴
    @PostMapping("/delete")
    public String deleteMember(String id, HttpServletRequest request) {
        try {
            boolean isDeleted = memberService.deleteMember(id);
            if (isDeleted) {
                return "redirect:/login"; // 탈퇴 성공 후 로그인 페이지로 리다이렉트
            } else {
                request.setAttribute("errorMessage", "회원탈퇴에 실패했습니다. 다시 시도해주세요.");
                return "memberList"; // 실패 시 회원 목록 페이지로 이동
            }
        } catch (Exception e) {
            request.setAttribute("errorMessage", "회원탈퇴 중 오류가 발생했습니다: " + e.getMessage());
            return "memberList"; // 예외 발생 시 회원 목록 페이지로 이동
        }
    }
}
