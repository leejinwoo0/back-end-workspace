package com.kh.pet.controller;

import jakarta.servlet.http.HttpServletRequest;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.kh.pet.model.vo.Member;
import com.kh.pet.service.MemberService;

@Controller
public class MemberController {

    @Autowired
    private MemberService memberService;

    @Autowired
    private PasswordEncoder passwordEncoder;

    // 중복체크
    @ResponseBody
    @PostMapping("/check")
    public boolean check(String id) {
        return memberService.check(id);
    }

    // 회원가입
    @PostMapping("/signUp")
    public String signUp(Member member, HttpServletRequest request) {
        try {
            if ("member".equals(member.getRole())) {
                member.setRole("ROLE_MEMBER");
            } else {
                member.setRole("ROLE_COMPANY");
            }
            // 비밀번호 암호화
            member.setPassword(passwordEncoder.encode(member.getPassword()));
            
            boolean isRegistered = memberService.signUp(member);
            if (isRegistered) {
                return "redirect:/login"; // 회원가입 성공 후 로그인 페이지로 리다이렉트
            } else {
                request.setAttribute("errorMessage", "회원가입에 실패했습니다. 다시 시도해주세요.");
                return "signUp"; // 실패 시 다시 회원가입 페이지로 이동
            }
        } catch (Exception e) {
            request.setAttribute("errorMessage", "회원가입 중 오류가 발생했습니다: " + e.getMessage());
            return "signUp"; // 예외 발생 시 다시 회원가입 페이지로 이동
        }
    }

    // 회원정보 수정 (이름, 전화번호, 이메일, 비밀번호, 주소)
    @PostMapping("/mypage/updateProfile")
    public String updateProfile(Member member, HttpServletRequest request, Model model) {
        try {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            Member currentUser = (Member) auth.getPrincipal();
            String username = currentUser.getUsername();

            UserDetails currentMember = memberService.loadUserByUsername(username);
            if (currentMember != null) {
                member.setId(currentMember.getUsername());
                member.setMemCode(currentUser.getMemCode());

                // 비밀번호 변경이 요청된 경우
                if (member.getPassword() != null && !member.getPassword().isEmpty()) {
                    if (!passwordEncoder.matches(member.getPwd(), currentMember.getPassword())) {
                        model.addAttribute("errorMessage", "기존 비밀번호가 틀렸습니다.");
                        return "mypage"; // 비밀번호가 틀리면 페이지에 남음
                    }
                    member.setPassword(passwordEncoder.encode(member.getPassword()));
                } else {
                    member.setPassword(currentMember.getPassword(); // 비밀번호 변경이 없을 경우 기존 비밀번호 유지
                }

                boolean isUpdated = memberService.updateProfile(member);
                if (isUpdated) {
                    return "redirect:/"; // 수정 성공 시 메인 페이지로 리다이렉트
                } else {
                    model.addAttribute("errorMessage", "정보 수정에 실패했습니다. 다시 시도해주세요.");
                    return "mypage"; // 실패 시 다시 회원정보 수정 페이지로 이동
                }
            } else {
                return "redirect:/login"; // 사용자를 찾을 수 없을 경우 로그인 페이지로 리다이렉트
            }
        } catch (Exception e) {
            model.addAttribute("errorMessage", "정보 수정 중 오류가 발생했습니다: " + e.getMessage());
            return "mypage"; // 예외 발생 시 다시 회원정보 수정 페이지로 이동
        }
    }

    // 회원탈퇴
    @PostMapping("/mypage/deleteAccount")
    public String deleteAccount(HttpServletRequest request, Model model) {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            Member currentUser = (Member) authentication.getPrincipal();
            String username = currentUser.getUsername();

            boolean isDeleted = memberService.deleteAccount(username);
            if (isDeleted) {
                SecurityContextHolder.clearContext(); // 인증 정보 삭제
                return "redirect:/login"; // 로그인 페이지로 리다이렉트
            } else {
                model.addAttribute("errorMessage", "회원탈퇴에 실패했습니다. 다시 시도해주세요.");
                return "mypage"; // 실패 시 다시 회원정보 수정 페이지로 이동
            }
        } catch (Exception e) {
            model.addAttribute("errorMessage", "회원탈퇴 중 오류가 발생했습니다: " + e.getMessage());
            return "mypage"; // 예외 발생 시 다시 회원정보 수정 페이지로 이동
        }
    }
}
