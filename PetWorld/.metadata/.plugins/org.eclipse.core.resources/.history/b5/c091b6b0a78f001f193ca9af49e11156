package com.kh.pet.service;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;


import com.kh.pet.model.vo.Member;

import mapper.MemberMapper;

@Service
public class MemberService {

    @Autowired
    private MemberMapper memberMapper;

    @Autowired
    private PasswordEncoder passwordEncoder;

    // 회원 목록 조회
    public List<Member> getMemberList() {
        return memberMapper.getMemberList();
    }

    // 아이디 중복 체크
    public boolean check(String id) {
        Member member = memberMapper.checkId(id);
        return member == null; // null이면 중복이 아님
    }

    // 회원가입
    public boolean signUp(Member member) {
        // 비밀번호 암호화
        member.setPassword(passwordEncoder.encode(member.getPassword()));
        return memberMapper.signUp(member) == 1; // INSERT 성공 시 1 반환
    }

    // 회원정보 수정
    public boolean updateProfile(Member member) {
        // 비밀번호 변경 요청 시 암호화
        if (member.getPassword() != null && !member.getPassword().isEmpty()) {
            member.setPassword(passwordEncoder.encode(member.getPassword()));
        }
        return memberMapper.updateMember(member) == 1; // UPDATE 성공 시 1 반환
    }

    // 회원탈퇴
    public boolean deleteAccount(String id) {
        return memberMapper.deleteMember(id) == 1; // DELETE 성공 시 1 반환
    }

    // 아이디로 회원 정보 가져오기
    public Member loadUserByUsername(String username) {
        return memberMapper.checkId(username); // 해당 아이디로 회원 정보 조회
    }
    
    // 비밀번호 확인 메소드 추가
    public boolean checkPassword(String username, String rawPassword) {
        Member member = loadUserByUsername(username); // 사용자 정보 가져오기
        if (member != null) {
            return passwordEncoder.matches(rawPassword, member.getPassword()); // 비밀번호 비교
        }
        return false; // 사용자 없음
    }
}
