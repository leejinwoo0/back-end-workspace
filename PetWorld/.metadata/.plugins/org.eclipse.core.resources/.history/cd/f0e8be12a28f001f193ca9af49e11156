package com.kh.pet.controller;

import jakarta.servlet.http.HttpServletRequest;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.kh.pet.model.vo.Member;
import com.kh.pet.service.MemberService;

@Controller
public class MemberController {

    @Autowired
    private MemberService memberService;
    
    @Autowired
	private PasswordEncoder bcpe;

    // 회원 목록 조회
    @GetMapping("/member/list")
    public String getMemberList(Model model) {
        List<Member> members = memberService.getMemberList();
        model.addAttribute("members", members);
        return "member/list"; // 회원 목록 페이지
    }

    // 중복체크
    @ResponseBody
    @PostMapping("/check")
    public boolean check(String id) {
        return memberService.check(id);
    }
    
    @PostMapping("/login")
    public String login(String id, String password, HttpServletRequest request, Model model) {
        // 사용자 인증 로직 (Spring Security를 사용하는 경우 필요 없음)
        
        // 로그인 성공 시
        request.getSession().setAttribute("userId", id); // 사용자 ID를 세션에 저장
        return "redirect:/index"; // 로그인 성공 후 리다이렉트할 페이지
    }


    // 회원가입
    @PostMapping("/signUp")
    public String signUp(Member member, HttpServletRequest request) {
        try {
            if ("member".equals(member.getRole())) {
                member.setRole("ROLE_MEMBER");
            } else {
                member.setRole("ROLE_COMPANY");
            }
            boolean isRegistered = memberService.signUp(member);
            if (isRegistered) {
                return "redirect:/login"; // 회원가입 성공 후 로그인 페이지로 리다이렉트
            } else {
                request.setAttribute("errorMessage", "회원가입에 실패했습니다. 다시 시도해주세요.");
                return "signUp"; // 실패 시 다시 회원가입 페이지로 이동
            }
        } catch (Exception e) {
            request.setAttribute("errorMessage", "회원가입 중 오류가 발생했습니다: " + e.getMessage());
            return "signUp"; // 예외 발생 시 다시 회원가입 페이지로 이동
        }
    }

    // 회원정보 수정
    @PostMapping("/mypage/update")
    public String updateProfile(Member member, HttpServletRequest request, Model model) {
        try {
            Authentication auth = SecurityContextHolder.getContext().getAuthentication();
            Member currentUser = (Member) auth.getPrincipal();
            member.setId(currentUser.getId()); // 현재 사용자의 ID 유지

            boolean isUpdated = memberService.updateProfile(member);
            if (isUpdated) {
                return "redirect:/"; // 수정 성공 시 메인 페이지로 리다이렉트
            } else {
                model.addAttribute("errorMessage", "정보 수정에 실패했습니다. 다시 시도해주세요.");
                return "mypage"; // 실패 시 다시 회원정보수정 페이지로 이동
            }
        } catch (Exception e) {
            model.addAttribute("errorMessage", "정보 수정 중 오류가 발생했습니다: " + e.getMessage());
            return "mypage"; // 예외 발생 시 다시 회원정보수정 페이지로 이동
        }
    }

    // 회원탈퇴
    @PostMapping("/mypage/delete")
    public String deleteAccount(HttpServletRequest request, Model model) {
        try {
            Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
            Member currentUser = (Member) authentication.getPrincipal();
            boolean isDeleted = memberService.deleteAccount(currentUser.getId());
            if (isDeleted) {
                SecurityContextHolder.clearContext(); // 인증 정보 삭제
                return "redirect:/login"; // 로그인 페이지로 리다이렉트
            } else {
                model.addAttribute("errorMessage", "회원탈퇴에 실패했습니다. 다시 시도해주세요.");
                return "mypage"; // 실패 시 다시 회원정보 수정 페이지로 이동
            }
        } catch (Exception e) {
            model.addAttribute("errorMessage", "회원탈퇴 중 오류가 발생했습니다: " + e.getMessage());
            return "mypage"; // 예외 발생 시 다시 회원정보 수정 페이지로 이동
        }
    }
}
