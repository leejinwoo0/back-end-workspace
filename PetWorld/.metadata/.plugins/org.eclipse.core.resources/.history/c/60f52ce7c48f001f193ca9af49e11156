package com.kh.pet.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.config.http.SessionCreationPolicy;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;
import org.springframework.web.filter.CharacterEncodingFilter;
import org.springframework.boot.web.servlet.FilterRegistrationBean;

@Configuration
@EnableWebSecurity
@ComponentScan
public class PetConfig {
    
    // SecurityFilterChain 설정
    @Bean
    public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
        return http
                .csrf(csrf -> csrf.disable()) // CSRF 비활성화
                .formLogin(login -> 
                    login
                        .loginPage("/login") // 커스텀 로그인 페이지
                        .defaultSuccessUrl("/", true) // 로그인 성공 시 이동할 URL
                        .failureHandler(new DomainFailureHandler()) // 로그인 실패 핸들러
                        .permitAll() // 로그인 페이지 접근 허용
                )
                .logout(logout -> 
                    logout
                        .logoutUrl("/logout") // 로그아웃 URL
                        .logoutSuccessUrl("/") // 로그아웃 성공 후 이동할 URL
                        .permitAll() // 로그아웃 접근 허용
                )
                .sessionManagement(session -> 
                    session.sessionCreationPolicy(SessionCreationPolicy.IF_REQUIRED) // 세션 정책
                )
                .authorizeHttpRequests(authorize -> 
                    authorize
                        .anyRequest().permitAll() // 모든 요청 허용
                )
                .build();
    }

    // 패스워드 인코더 설정 (BCrypt)
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    // CharacterEncodingFilter 설정 추가
    @Bean(name = "customCharacterEncodingFilter")
    public FilterRegistrationBean<CharacterEncodingFilter> characterEncodingFilter() {
        CharacterEncodingFilter filter = new CharacterEncodingFilter();
        filter.setEncoding("UTF-8");
        filter.setForceEncoding(true);

        FilterRegistrationBean<CharacterEncodingFilter> filterBean = new FilterRegistrationBean<>(filter);
        filterBean.setOrder(Integer.MIN_VALUE); // 필터의 우선순위 설정
        return filterBean;
    }
}
