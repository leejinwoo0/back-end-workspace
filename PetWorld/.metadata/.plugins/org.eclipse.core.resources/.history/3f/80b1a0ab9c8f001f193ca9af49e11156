package com.kh.pet.service;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.kh.pet.model.vo.Member;

import mapper.MemberMapper;




@Service
public class MemberService {

    @Autowired
    private MemberMapper memberMapper;

    @Autowired
    private PasswordEncoder passwordEncoder;

    // 중복 체크
    public boolean check(String id) {
        Member member = memberMapper.checkId(id);
        return member == null; // ID가 없으면 중복이 아님
    }

    // 회원가입
    @Transactional
    public boolean signUp(Member member) {
        try {
            // 비밀번호 암호화
            member.setPassword(passwordEncoder.encode(member.getPassword()));
            memberMapper.signUp(member); // 회원 정보를 DB에 저장
            return true;
        } catch (Exception e) {
            e.printStackTrace();
            return false; // 예외 발생 시 false 반환
        }
    }

    // 회원정보 수정
    @Transactional
    public boolean updateProfile(Member member) {
        try {
            // 비밀번호 변경이 요청된 경우 암호화
            if (member.getPassword() != null && !member.getPassword().isEmpty()) {
                member.setPassword(passwordEncoder.encode(member.getPassword()));
            } // 비밀번호가 없으면 기존 비밀번호 유지

            int updatedRows = memberMapper.updateMember(member); // 회원 정보를 업데이트
            return updatedRows > 0; // 업데이트된 행이 있으면 true 반환
        } catch (Exception e) {
            e.printStackTrace();
            return false; // 예외 발생 시 false 반환
        }
    }

    // 회원탈퇴
    @Transactional
    public boolean deleteAccount(String username) {
        try {
            int deletedRows = memberMapper.deleteMember(username); // 회원 정보를 삭제
            return deletedRows > 0; // 삭제된 행이 있으면 true 반환
        } catch (Exception e) {
            e.printStackTrace();
            return false; // 예외 발생 시 false 반환
        }
    }

    // 사용자 이름으로 회원 정보 로드
    public Member loadUserByUsername(String username) {
        return memberMapper.findById(username); // 회원 ID로 회원 정보를 가져옴
    }
}
